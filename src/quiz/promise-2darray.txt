- Extract the code in the setTimeout function and replace the setTimeout function  with the extracted code. Then run the main script. 
- Is there a difference in the flow of execution from when the code was in the setTimeout function?
- Is the flow of execution in both these examples different from the flow of execution with the examples using the fetch() API, which also returns a promise? 
- If yes, explain the code execution difference. Add your explanation to this file.

Yes there is a difference in the flow of execution in both cases:

When the code inside setTimeout is removed from setTimeout and setTimeout is removed itself, then the code
output in the terminal is synchronous as 'returning from sum' is displayed after the actual sum is calculated
So without setTimeout the code runs synchronous and the promise is resolved with the sum before it is returned

Whereas when the code is inside setTimeout, all the actual calculation is done after both the
'Sum called' and 'returning from sum' statements are logged to the console. And so with the 
setTimeout function, the promise is returned and then the calculation is done.

--

The fetch() api is based on a network call so it is always asynchronous as it has to wait for the
network call to finish before resolving a promise so it always sends back a pending promise in its return.
It is similar to how the flow of execution is when setTimeout is used.

--

The setTimeout code emulates a delay similar to that of the time required to make the network call
and resolve it. Hence it is similar in the sense that it runs asynchronously but can be different depending
on the amount of time a network request can take as that can vary a lot unlike the setTimeout which is
fixed for the given amoutn of time.

